{"version":3,"sources":["dropzone.js"],"names":[],"mappingsfile":"dropzone.js","sourcesContent":["/*\r\n *\r\n * More info at [www.dropzonejs.com](http://www.dropzonejs.com)\r\n *\r\n * Copyright (c) 2012, Matias Meno\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n\r\n(function() {\r\n    var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,\r\n        __slice = [].slice,\r\n        __hasProp = {}.hasOwnProperty,\r\n        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n    noop = function() {};\r\n\r\n    Emitter = (function() {\r\n        function Emitter() {}\r\n\r\n        Emitter.prototype.addEventListener = Emitter.prototype.on;\r\n\r\n        Emitter.prototype.on = function(event, fn) {\r\n            this._callbacks = this._callbacks || {};\r\n            if (!this._callbacks[event]) {\r\n                this._callbacks[event] = [];\r\n            }\r\n            this._callbacks[event].push(fn);\r\n            return this;\r\n        };\r\n\r\n        Emitter.prototype.emit = function() {\r\n            var args, callback, callbacks, event, _i, _len;\r\n            event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\r\n            this._callbacks = this._callbacks || {};\r\n            callbacks = this._callbacks[event];\r\n            if (callbacks) {\r\n                for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\r\n                    callback = callbacks[_i];\r\n                    callback.apply(this, args);\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        Emitter.prototype.removeListener = Emitter.prototype.off;\r\n\r\n        Emitter.prototype.removeAllListeners = Emitter.prototype.off;\r\n\r\n        Emitter.prototype.removeEventListener = Emitter.prototype.off;\r\n\r\n        Emitter.prototype.off = function(event, fn) {\r\n            var callback, callbacks, i, _i, _len;\r\n            if (!this._callbacks || arguments.length === 0) {\r\n                this._callbacks = {};\r\n                return this;\r\n            }\r\n            callbacks = this._callbacks[event];\r\n            if (!callbacks) {\r\n                return this;\r\n            }\r\n            if (arguments.length === 1) {\r\n                delete this._callbacks[event];\r\n                return this;\r\n            }\r\n            for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {\r\n                callback = callbacks[i];\r\n                if (callback === fn) {\r\n                    callbacks.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n\r\n        return Emitter;\r\n\r\n    })();\r\n\r\n    Dropzone = (function(_super) {\r\n        var extend, resolveOption;\r\n\r\n        __extends(Dropzone, _super);\r\n\r\n        Dropzone.prototype.Emitter = Emitter;\r\n\r\n\r\n        /*\r\n         This is a list of all available events you can register on a dropzone object.\r\n\r\n         You can register an event handler like this:\r\n\r\n         dropzone.on(\"dragEnter\", function() { });\r\n         */\r\n\r\n        Dropzone.prototype.events = [\"drop\", \"dragstart\", \"dragend\", \"dragenter\", \"dragover\", \"dragleave\", \"addedfile\", \"addedfiles\", \"removedfile\", \"thumbnail\", \"error\", \"errormultiple\", \"processing\", \"processingmultiple\", \"uploadprogress\", \"totaluploadprogress\", \"sending\", \"sendingmultiple\", \"success\", \"successmultiple\", \"canceled\", \"canceledmultiple\", \"complete\", \"completemultiple\", \"reset\", \"maxfilesexceeded\", \"maxfilesreached\", \"queuecomplete\"];\r\n\r\n        Dropzone.prototype.defaultOptions = {\r\n            url: null,\r\n            method: \"post\",\r\n            withCredentials: false,\r\n            parallelUploads: 2,\r\n            uploadMultiple: false,\r\n            maxFilesize: 256,\r\n            paramName: \"file\",\r\n            createImageThumbnails: true,\r\n            maxThumbnailFilesize: 10,\r\n            thumbnailWidth: 120,\r\n            thumbnailHeight: 120,\r\n            filesizeBase: 1000,\r\n            maxFiles: null,\r\n            params: {},\r\n            clickable: true,\r\n            ignoreHiddenFiles: true,\r\n            acceptedFiles: null,\r\n            acceptedMimeTypes: null,\r\n            autoProcessQueue: true,\r\n            autoQueue: true,\r\n            addRemoveLinks: false,\r\n            previewsContainer: null,\r\n            hiddenInputContainer: \"body\",\r\n            capture: null,\r\n            renameFilename: null,\r\n            dictDefaultMessage: \"Drop files here to upload\",\r\n            dictFallbackMessage: \"Your browser does not support drag'n'drop file uploads.\",\r\n            dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\r\n            dictFileTooBig: \"File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.\",\r\n            dictInvalidFileType: \"You can't upload files of this type.\",\r\n            dictResponseError: \"Server responded with {{statusCode}} code.\",\r\n            dictCancelUpload: \"Cancel upload\",\r\n            dictCancelUploadConfirmation: \"Are you sure you want to cancel this upload?\",\r\n            dictRemoveFile: \"Remove file\",\r\n            dictRemoveFileConfirmation: null,\r\n            dictMaxFilesExceeded: \"You can not upload any more files.\",\r\n            accept: function(file, done) {\r\n                return done();\r\n            },\r\n            init: function() {\r\n                return noop;\r\n            },\r\n            forceFallback: false,\r\n            fallback: function() {\r\n                var child, messageElement, span, _i, _len, _ref;\r\n                this.element.className = \"\" + this.element.className + \" dz-browser-not-supported\";\r\n                _ref = this.element.getElementsByTagName(\"div\");\r\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                    child = _ref[_i];\r\n                    if (/(^| )dz-message($| )/.test(child.className)) {\r\n                        messageElement = child;\r\n                        child.className = \"dz-message\";\r\n                        continue;\r\n                    }\r\n                }\r\n                if (!messageElement) {\r\n                    messageElement = Dropzone.createElement(\"<div class=\\\"dz-message\\\"><span></span></div>\");\r\n                    this.element.appendChild(messageElement);\r\n                }\r\n                span = messageElement.getElementsByTagName(\"span\")[0];\r\n                if (span) {\r\n                    if (span.textContent != null) {\r\n                        span.textContent = this.options.dictFallbackMessage;\r\n                    } else if (span.innerText != null) {\r\n                        span.innerText = this.options.dictFallbackMessage;\r\n                    }\r\n                }\r\n                return this.element.appendChild(this.getFallbackForm());\r\n            },\r\n            resize: function(file) {\r\n                var info, srcRatio, trgRatio;\r\n                info = {\r\n                    srcX: 0,\r\n                    srcY: 0,\r\n                    srcWidth: file.width,\r\n                    srcHeight: file.height\r\n                };\r\n                srcRatio = file.width / file.height;\r\n                info.optWidth = this.options.thumbnailWidth;\r\n                info.optHeight = this.options.thumbnailHeight;\r\n                if ((info.optWidth == null) && (info.optHeight == null)) {\r\n                    info.optWidth = info.srcWidth;\r\n                    info.optHeight = info.srcHeight;\r\n                } else if (info.optWidth == null) {\r\n                    info.optWidth = srcRatio * info.optHeight;\r\n                } else if (info.optHeight == null) {\r\n                    info.optHeight = (1 / srcRatio) * info.optWidth;\r\n                }\r\n                trgRatio = info.optWidth / info.optHeight;\r\n                if (file.height < info.optHeight || file.width < info.optWidth) {\r\n                    info.trgHeight = info.srcHeight;\r\n                    info.trgWidth = info.srcWidth;\r\n                } else {\r\n                    if (srcRatio > trgRatio) {\r\n                        info.srcHeight = file.height;\r\n                        info.srcWidth = info.srcHeight * trgRatio;\r\n                    } else {\r\n                        info.srcWidth = file.width;\r\n                        info.srcHeight = info.srcWidth / trgRatio;\r\n                    }\r\n                }\r\n                info.srcX = (file.width - info.srcWidth) / 2;\r\n                info.srcY = (file.height - info.srcHeight) / 2;\r\n                return info;\r\n            },\r\n\r\n            /*\r\n             Those functions register themselves to the events on init and handle all\r\n             the user interface specific stuff. Overwriting them won't break the upload\r\n             but can break the way it's displayed.\r\n             You can overwrite them if you don't like the default behavior. If you just\r\n             want to add an additional event handler, register it on the dropzone object\r\n             and don't overwrite those options.\r\n             */\r\n            drop: function(e) {\r\n                return this.element.classList.remove(\"dz-drag-hover\");\r\n            },\r\n            dragstart: noop,\r\n            dragend: function(e) {\r\n                return this.element.classList.remove(\"dz-drag-hover\");\r\n            },\r\n            dragenter: function(e) {\r\n                return this.element.classList.add(\"dz-drag-hover\");\r\n            },\r\n            dragover: function(e) {\r\n                return this.element.classList.add(\"dz-drag-hover\");\r\n            },\r\n            dragleave: function(e) {\r\n                return this.element.classList.remove(\"dz-drag-hover\");\r\n            },\r\n            paste: noop,\r\n            reset: function() {\r\n                return this.element.classList.remove(\"dz-started\");\r\n            },\r\n            addedfile: function(file) {\r\n                var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;\r\n                if (this.element === this.previewsContainer) {\r\n                    this.element.classList.add(\"dz-started\");\r\n                }\r\n                if (this.previewsContainer) {\r\n                    file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());\r\n                    file.previewTemplate = file.previewElement;\r\n                    this.previewsContainer.appendChild(file.previewElement);\r\n                    _ref = file.previewElement.querySelectorAll(\"[data-dz-name]\");\r\n                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                        node = _ref[_i];\r\n                        node.textContent = this._renameFilename(file.name);\r\n                    }\r\n                    _ref1 = file.previewElement.querySelectorAll(\"[data-dz-size]\");\r\n                    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\r\n                        node = _ref1[_j];\r\n                        node.innerHTML = this.filesize(file.size);\r\n                    }\r\n                    if (this.options.addRemoveLinks) {\r\n                        file._removeLink = Dropzone.createElement(\"<a class=\\\"dz-remove\\\" href=\\\"javascript:undefined;\\\" data-dz-remove>\" + this.options.dictRemoveFile + \"</a>\");\r\n                        file.previewElement.appendChild(file._removeLink);\r\n                    }\r\n                    removeFileEvent = (function(_this) {\r\n                        return function(e) {\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                            if (file.status === Dropzone.UPLOADING) {\r\n                                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {\r\n                                    return _this.removeFile(file);\r\n                                });\r\n                            } else {\r\n                                if (_this.options.dictRemoveFileConfirmation) {\r\n                                    return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {\r\n                                        return _this.removeFile(file);\r\n                                    });\r\n                                } else {\r\n                                    return _this.removeFile(file);\r\n                                }\r\n                            }\r\n                        };\r\n                    })(this);\r\n                    _ref2 = file.previewElement.querySelectorAll(\"[data-dz-remove]\");\r\n                    _results = [];\r\n                    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\r\n                        removeLink = _ref2[_k];\r\n                        _results.push(removeLink.addEventListener(\"click\", removeFileEvent));\r\n                    }\r\n                    return _results;\r\n                }\r\n            },\r\n            removedfile: function(file) {\r\n                var _ref;\r\n                if (file.previewElement) {\r\n                    if ((_ref = file.previewElement) != null) {\r\n                        _ref.parentNode.removeChild(file.previewElement);\r\n                    }\r\n                }\r\n                return this._updateMaxFilesReachedClass();\r\n            },\r\n            thumbnail: function(file, dataUrl) {\r\n                var thumbnailElement, _i, _len, _ref;\r\n                if (file.previewElement) {\r\n                    file.previewElement.classList.remove(\"dz-file-preview\");\r\n                    _ref = file.previewElement.querySelectorAll(\"[data-dz-thumbnail]\");\r\n                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                        thumbnailElement = _ref[_i];\r\n                        thumbnailElement.alt = file.name;\r\n                        thumbnailElement.src = dataUrl;\r\n                    }\r\n                    return setTimeout(((function(_this) {\r\n                        return function() {\r\n                            return file.previewElement.classList.add(\"dz-image-preview\");\r\n                        };\r\n                    })(this)), 1);\r\n                }\r\n            },\r\n            error: function(file, message) {\r\n                var node, _i, _len, _ref, _results;\r\n                if (file.previewElement) {\r\n                    file.previewElement.classList.add(\"dz-error\");\r\n                    if (typeof message !== \"String\" && message.error) {\r\n                        message = message.error;\r\n                    }\r\n                    _ref = file.previewElement.querySelectorAll(\"[data-dz-errormessage]\");\r\n                    _results = [];\r\n                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                        node = _ref[_i];\r\n                        _results.push(node.textContent = message);\r\n                    }\r\n                    return _results;\r\n                }\r\n            },\r\n            errormultiple: noop,\r\n            processing: function(file) {\r\n                if (file.previewElement) {\r\n                    file.previewElement.classList.add(\"dz-processing\");\r\n                    if (file._removeLink) {\r\n                        return file._removeLink.textContent = this.options.dictCancelUpload;\r\n                    }\r\n                }\r\n            },\r\n            processingmultiple: noop,\r\n            uploadprogress: function(file, progress, bytesSent) {\r\n                var node, _i, _len, _ref, _results;\r\n                if (file.previewElement) {\r\n                    _ref = file.previewElement.querySelectorAll(\"[data-dz-uploadprogress]\");\r\n                    _results = [];\r\n                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                        node = _ref[_i];\r\n                        if (node.nodeName === 'PROGRESS') {\r\n                            _results.push(node.value = progress);\r\n                        } else {\r\n                            _results.push(node.style.width = \"\" + progress + \"%\");\r\n                        }\r\n                    }\r\n                    return _results;\r\n                }\r\n            },\r\n            totaluploadprogress: noop,\r\n            sending: noop,\r\n            sendingmultiple: noop,\r\n            success: function(file) {\r\n                if (file.previewElement) {\r\n                    return file.previewElement.classList.add(\"dz-success\");\r\n                }\r\n            },\r\n            successmultiple: noop,\r\n            canceled: function(file) {\r\n                return this.emit(\"error\", file, \"Upload canceled.\");\r\n            },\r\n            canceledmultiple: noop,\r\n            complete: function(file) {\r\n                if (file._removeLink) {\r\n                    file._removeLink.textContent = this.options.dictRemoveFile;\r\n                }\r\n                if (file.previewElement) {\r\n                    return file.previewElement.classList.add(\"dz-complete\");\r\n                }\r\n            },\r\n            completemultiple: noop,\r\n            maxfilesexceeded: noop,\r\n            maxfilesreached: noop,\r\n            queuecomplete: noop,\r\n            addedfiles: noop,\r\n            previewTemplate: \"<div class=\\\"dz-preview dz-file-preview\\\">\\n  <div class=\\\"dz-image\\\"><img data-dz-thumbnail /></div>\\n  <div class=\\\"dz-details\\\">\\n    <div class=\\\"dz-size\\\"><span data-dz-size></span></div>\\n    <div class=\\\"dz-filename\\\"><span data-dz-name></span></div>\\n  </div>\\n  <div class=\\\"dz-progress\\\"><span class=\\\"dz-upload\\\" data-dz-uploadprogress></span></div>\\n  <div class=\\\"dz-error-message\\\"><span data-dz-errormessage></span></div>\\n  <div class=\\\"dz-success-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Check</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <path d=\\\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" stroke-opacity=\\\"0.198794158\\\" stroke=\\\"#747474\\\" fill-opacity=\\\"0.816519475\\\" fill=\\\"#FFFFFF\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n      </g>\\n    </svg>\\n  </div>\\n  <div class=\\\"dz-error-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Error</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <g id=\\\"Check-+-Oval-2\\\" sketch:type=\\\"MSLayerGroup\\\" stroke=\\\"#747474\\\" stroke-opacity=\\\"0.198794158\\\" fill=\\\"#FFFFFF\\\" fill-opacity=\\\"0.816519475\\\">\\n          <path d=\\\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n        </g>\\n      </g>\\n    </svg>\\n  </div>\\n</div>\"\r\n        };\r\n\r\n        extend = function() {\r\n            var key, object, objects, target, val, _i, _len;\r\n            target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\r\n            for (_i = 0, _len = objects.length; _i < _len; _i++) {\r\n                object = objects[_i];\r\n                for (key in object) {\r\n                    val = object[key];\r\n                    target[key] = val;\r\n                }\r\n            }\r\n            return target;\r\n        };\r\n\r\n        function Dropzone(element, options) {\r\n            var elementOptions, fallback, _ref;\r\n            this.element = element;\r\n            this.version = Dropzone.version;\r\n            this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\\n*/g, \"\");\r\n            this.clickableElements = [];\r\n            this.listeners = [];\r\n            this.files = [];\r\n            if (typeof this.element === \"string\") {\r\n                this.element = document.querySelector(this.element);\r\n            }\r\n            if (!(this.element && (this.element.nodeType != null))) {\r\n                throw new Error(\"Invalid dropzone element.\");\r\n            }\r\n            if (this.element.dropzone) {\r\n                throw new Error(\"Dropzone already attached.\");\r\n            }\r\n            Dropzone.instances.push(this);\r\n            this.element.dropzone = this;\r\n            elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};\r\n            this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});\r\n            if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {\r\n                return this.options.fallback.call(this);\r\n            }\r\n            if (this.options.url == null) {\r\n                this.options.url = this.element.getAttribute(\"action\");\r\n            }\r\n            if (!this.options.url) {\r\n                throw new Error(\"No URL provided.\");\r\n            }\r\n            if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {\r\n                throw new Error(\"You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.\");\r\n            }\r\n            if (this.options.acceptedMimeTypes) {\r\n                this.options.acceptedFiles = this.options.acceptedMimeTypes;\r\n                delete this.options.acceptedMimeTypes;\r\n            }\r\n            this.options.method = this.options.method.toUpperCase();\r\n            if ((fallback = this.getExistingFallback()) && fallback.parentNode) {\r\n                fallback.parentNode.removeChild(fallback);\r\n            }\r\n            if (this.options.previewsContainer !== false) {\r\n                if (this.options.previewsContainer) {\r\n                    this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, \"previewsContainer\");\r\n                } else {\r\n                    this.previewsContainer = this.element;\r\n                }\r\n            }\r\n            if (this.options.clickable) {\r\n                if (this.options.clickable === true) {\r\n                    this.clickableElements = [this.element];\r\n                } else {\r\n                    this.clickableElements = Dropzone.getElements(this.options.clickable, \"clickable\");\r\n                }\r\n            }\r\n            this.init();\r\n        }\r\n\r\n        Dropzone.prototype.getAcceptedFiles = function() {\r\n            var file, _i, _len, _ref, _results;\r\n            _ref = this.files;\r\n            _results = [];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                file = _ref[_i];\r\n                if (file.accepted) {\r\n                    _results.push(file);\r\n                }\r\n            }\r\n            return _results;\r\n        };\r\n\r\n        Dropzone.prototype.getRejectedFiles = function() {\r\n            var file, _i, _len, _ref, _results;\r\n            _ref = this.files;\r\n            _results = [];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                file = _ref[_i];\r\n                if (!file.accepted) {\r\n                    _results.push(file);\r\n                }\r\n            }\r\n            return _results;\r\n        };\r\n\r\n        Dropzone.prototype.getFilesWithStatus = function(status) {\r\n            var file, _i, _len, _ref, _results;\r\n            _ref = this.files;\r\n            _results = [];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                file = _ref[_i];\r\n                if (file.status === status) {\r\n                    _results.push(file);\r\n                }\r\n            }\r\n            return _results;\r\n        };\r\n\r\n        Dropzone.prototype.getQueuedFiles = function() {\r\n            return this.getFilesWithStatus(Dropzone.QUEUED);\r\n        };\r\n\r\n        Dropzone.prototype.getUploadingFiles = function() {\r\n            return this.getFilesWithStatus(Dropzone.UPLOADING);\r\n        };\r\n\r\n        Dropzone.prototype.getAddedFiles = function() {\r\n            return this.getFilesWithStatus(Dropzone.ADDED);\r\n        };\r\n\r\n        Dropzone.prototype.getActiveFiles = function() {\r\n            var file, _i, _len, _ref, _results;\r\n            _ref = this.files;\r\n            _results = [];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                file = _ref[_i];\r\n                if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {\r\n                    _results.push(file);\r\n                }\r\n            }\r\n            return _results;\r\n        };\r\n\r\n        Dropzone.prototype.init = function() {\r\n            var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;\r\n            if (this.element.tagName === \"form\") {\r\n                this.element.setAttribute(\"enctype\", \"multipart/form-data\");\r\n            }\r\n            if (this.element.classList.contains(\"dropzone\") && !this.element.querySelector(\".dz-message\")) {\r\n                this.element.appendChild(Dropzone.createElement(\"<div class=\\\"dz-default dz-message\\\"><span>\" + this.options.dictDefaultMessage + \"</span></div>\"));\r\n            }\r\n            if (this.clickableElements.length) {\r\n                setupHiddenFileInput = (function(_this) {\r\n                    return function() {\r\n                        if (_this.hiddenFileInput) {\r\n                            _this.hiddenFileInput.parentNode.removeChild(_this.hiddenFileInput);\r\n                        }\r\n                        _this.hiddenFileInput = document.createElement(\"input\");\r\n                        _this.hiddenFileInput.setAttribute(\"type\", \"file\");\r\n                        if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {\r\n                            _this.hiddenFileInput.setAttribute(\"multiple\", \"multiple\");\r\n                        }\r\n                        _this.hiddenFileInput.className = \"dz-hidden-input\";\r\n                        if (_this.options.acceptedFiles != null) {\r\n                            _this.hiddenFileInput.setAttribute(\"accept\", _this.options.acceptedFiles);\r\n                        }\r\n                        if (_this.options.capture != null) {\r\n                            _this.hiddenFileInput.setAttribute(\"capture\", _this.options.capture);\r\n                        }\r\n                        _this.hiddenFileInput.style.visibility = \"hidden\";\r\n                        _this.hiddenFileInput.style.position = \"absolute\";\r\n                        _this.hiddenFileInput.style.top = \"0\";\r\n                        _this.hiddenFileInput.style.left = \"0\";\r\n                        _this.hiddenFileInput.style.height = \"0\";\r\n                        _this.hiddenFileInput.style.width = \"0\";\r\n                        document.querySelector(_this.options.hiddenInputContainer).appendChild(_this.hiddenFileInput);\r\n                        return _this.hiddenFileInput.addEventListener(\"change\", function() {\r\n                            var file, files, _i, _len;\r\n                            files = _this.hiddenFileInput.files;\r\n                            if (files.length) {\r\n                                for (_i = 0, _len = files.length; _i < _len; _i++) {\r\n                                    file = files[_i];\r\n                                    _this.addFile(file);\r\n                                }\r\n                            }\r\n                            _this.emit(\"addedfiles\", files);\r\n                            return setupHiddenFileInput();\r\n                        });\r\n                    };\r\n                })(this);\r\n                setupHiddenFileInput();\r\n            }\r\n            this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;\r\n            _ref1 = this.events;\r\n            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\r\n                eventName = _ref1[_i];\r\n                this.on(eventName, this.options[eventName]);\r\n            }\r\n            this.on(\"uploadprogress\", (function(_this) {\r\n                return function() {\r\n                    return _this.updateTotalUploadProgress();\r\n                };\r\n            })(this));\r\n            this.on(\"removedfile\", (function(_this) {\r\n                return function() {\r\n                    return _this.updateTotalUploadProgress();\r\n                };\r\n            })(this));\r\n            this.on(\"canceled\", (function(_this) {\r\n                return function(file) {\r\n                    return _this.emit(\"complete\", file);\r\n                };\r\n            })(this));\r\n            this.on(\"complete\", (function(_this) {\r\n                return function(file) {\r\n                    if (_this.getAddedFiles().length === 0 && _this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {\r\n                        return setTimeout((function() {\r\n                            return _this.emit(\"queuecomplete\");\r\n                        }), 0);\r\n                    }\r\n                };\r\n            })(this));\r\n            noPropagation = function(e) {\r\n                e.stopPropagation();\r\n                if (e.preventDefault) {\r\n                    return e.preventDefault();\r\n                } else {\r\n                    return e.returnValue = false;\r\n                }\r\n            };\r\n            this.listeners = [\r\n                {\r\n                    element: this.element,\r\n                    events: {\r\n                        \"dragstart\": (function(_this) {\r\n                            return function(e) {\r\n                                return _this.emit(\"dragstart\", e);\r\n                            };\r\n                        })(this),\r\n                        \"dragenter\": (function(_this) {\r\n                            return function(e) {\r\n                                noPropagation(e);\r\n                                return _this.emit(\"dragenter\", e);\r\n                            };\r\n                        })(this),\r\n                        \"dragover\": (function(_this) {\r\n                            return function(e) {\r\n                                var efct;\r\n                                try {\r\n                                    efct = e.dataTransfer.effectAllowed;\r\n                                } catch (_error) {}\r\n                                e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';\r\n                                noPropagation(e);\r\n                                return _this.emit(\"dragover\", e);\r\n                            };\r\n                        })(this),\r\n                        \"dragleave\": (function(_this) {\r\n                            return function(e) {\r\n                                return _this.emit(\"dragleave\", e);\r\n                            };\r\n                        })(this),\r\n                        \"drop\": (function(_this) {\r\n                            return function(e) {\r\n                                noPropagation(e);\r\n                                return _this.drop(e);\r\n                            };\r\n                        })(this),\r\n                        \"dragend\": (function(_this) {\r\n                            return function(e) {\r\n                                return _this.emit(\"dragend\", e);\r\n                            };\r\n                        })(this)\r\n                    }\r\n                }\r\n            ];\r\n            this.clickableElements.forEach((function(_this) {\r\n                return function(clickableElement) {\r\n                    return _this.listeners.push({\r\n                        element: clickableElement,\r\n                        events: {\r\n                            \"click\": function(evt) {\r\n                                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(\".dz-message\")))) {\r\n                                    _this.hiddenFileInput.click();\r\n                                }\r\n                                return true;\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n            })(this));\r\n            this.enable();\r\n            return this.options.init.call(this);\r\n        };\r\n\r\n        Dropzone.prototype.destroy = function() {\r\n            var _ref;\r\n            this.disable();\r\n            this.removeAllFiles(true);\r\n            if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {\r\n                this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\r\n                this.hiddenFileInput = null;\r\n            }\r\n            delete this.element.dropzone;\r\n            return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);\r\n        };\r\n\r\n        Dropzone.prototype.updateTotalUploadProgress = function() {\r\n            var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;\r\n            totalBytesSent = 0;\r\n            totalBytes = 0;\r\n            activeFiles = this.getActiveFiles();\r\n            if (activeFiles.length) {\r\n                _ref = this.getActiveFiles();\r\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                    file = _ref[_i];\r\n                    totalBytesSent += file.upload.bytesSent;\r\n                    totalBytes += file.upload.total;\r\n                }\r\n                totalUploadProgress = 100 * totalBytesSent / totalBytes;\r\n            } else {\r\n                totalUploadProgress = 100;\r\n            }\r\n            return this.emit(\"totaluploadprogress\", totalUploadProgress, totalBytes, totalBytesSent);\r\n        };\r\n\r\n        Dropzone.prototype._getParamName = function(n) {\r\n            if (typeof this.options.paramName === \"function\") {\r\n                return this.options.paramName(n);\r\n            } else {\r\n                return \"\" + this.options.paramName + (this.options.uploadMultiple ? \"[\" + n + \"]\" : \"\");\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype._renameFilename = function(name) {\r\n            if (typeof this.options.renameFilename !== \"function\") {\r\n                return name;\r\n            }\r\n            return this.options.renameFilename(name);\r\n        };\r\n\r\n        Dropzone.prototype.getFallbackForm = function() {\r\n            var existingFallback, fields, fieldsString, form;\r\n            if (existingFallback = this.getExistingFallback()) {\r\n                return existingFallback;\r\n            }\r\n            fieldsString = \"<div class=\\\"dz-fallback\\\">\";\r\n            if (this.options.dictFallbackText) {\r\n                fieldsString += \"<p>\" + this.options.dictFallbackText + \"</p>\";\r\n            }\r\n            fieldsString += \"<input type=\\\"file\\\" name=\\\"\" + (this._getParamName(0)) + \"\\\" \" + (this.options.uploadMultiple ? 'multiple=\"multiple\"' : void 0) + \" /><input type=\\\"submit\\\" value=\\\"Upload!\\\"></div>\";\r\n            fields = Dropzone.createElement(fieldsString);\r\n            if (this.element.tagName !== \"FORM\") {\r\n                form = Dropzone.createElement(\"<form action=\\\"\" + this.options.url + \"\\\" enctype=\\\"multipart/form-data\\\" method=\\\"\" + this.options.method + \"\\\"></form>\");\r\n                form.appendChild(fields);\r\n            } else {\r\n                this.element.setAttribute(\"enctype\", \"multipart/form-data\");\r\n                this.element.setAttribute(\"method\", this.options.method);\r\n            }\r\n            return form != null ? form : fields;\r\n        };\r\n\r\n        Dropzone.prototype.getExistingFallback = function() {\r\n            var fallback, getFallback, tagName, _i, _len, _ref;\r\n            getFallback = function(elements) {\r\n                var el, _i, _len;\r\n                for (_i = 0, _len = elements.length; _i < _len; _i++) {\r\n                    el = elements[_i];\r\n                    if (/(^| )fallback($| )/.test(el.className)) {\r\n                        return el;\r\n                    }\r\n                }\r\n            };\r\n            _ref = [\"div\", \"form\"];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                tagName = _ref[_i];\r\n                if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {\r\n                    return fallback;\r\n                }\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype.setupEventListeners = function() {\r\n            var elementListeners, event, listener, _i, _len, _ref, _results;\r\n            _ref = this.listeners;\r\n            _results = [];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                elementListeners = _ref[_i];\r\n                _results.push((function() {\r\n                    var _ref1, _results1;\r\n                    _ref1 = elementListeners.events;\r\n                    _results1 = [];\r\n                    for (event in _ref1) {\r\n                        listener = _ref1[event];\r\n                        _results1.push(elementListeners.element.addEventListener(event, listener, false));\r\n                    }\r\n                    return _results1;\r\n                })());\r\n            }\r\n            return _results;\r\n        };\r\n\r\n        Dropzone.prototype.removeEventListeners = function() {\r\n            var elementListeners, event, listener, _i, _len, _ref, _results;\r\n            _ref = this.listeners;\r\n            _results = [];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                elementListeners = _ref[_i];\r\n                _results.push((function() {\r\n                    var _ref1, _results1;\r\n                    _ref1 = elementListeners.events;\r\n                    _results1 = [];\r\n                    for (event in _ref1) {\r\n                        listener = _ref1[event];\r\n                        _results1.push(elementListeners.element.removeEventListener(event, listener, false));\r\n                    }\r\n                    return _results1;\r\n                })());\r\n            }\r\n            return _results;\r\n        };\r\n\r\n        Dropzone.prototype.disable = function() {\r\n            var file, _i, _len, _ref, _results;\r\n            this.clickableElements.forEach(function(element) {\r\n                return element.classList.remove(\"dz-clickable\");\r\n            });\r\n            this.removeEventListeners();\r\n            _ref = this.files;\r\n            _results = [];\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                file = _ref[_i];\r\n                _results.push(this.cancelUpload(file));\r\n            }\r\n            return _results;\r\n        };\r\n\r\n        Dropzone.prototype.enable = function() {\r\n            this.clickableElements.forEach(function(element) {\r\n                return element.classList.add(\"dz-clickable\");\r\n            });\r\n            return this.setupEventListeners();\r\n        };\r\n\r\n        Dropzone.prototype.filesize = function(size) {\r\n            var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;\r\n            selectedSize = 0;\r\n            selectedUnit = \"b\";\r\n            if (size > 0) {\r\n                units = ['TB', 'GB', 'MB', 'KB', 'b'];\r\n                for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {\r\n                    unit = units[i];\r\n                    cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;\r\n                    if (size >= cutoff) {\r\n                        selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);\r\n                        selectedUnit = unit;\r\n                        break;\r\n                    }\r\n                }\r\n                selectedSize = Math.round(10 * selectedSize) / 10;\r\n            }\r\n            return \"<strong>\" + selectedSize + \"</strong> \" + selectedUnit;\r\n        };\r\n\r\n        Dropzone.prototype._updateMaxFilesReachedClass = function() {\r\n            if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\r\n                if (this.getAcceptedFiles().length === this.options.maxFiles) {\r\n                    this.emit('maxfilesreached', this.files);\r\n                }\r\n                return this.element.classList.add(\"dz-max-files-reached\");\r\n            } else {\r\n                return this.element.classList.remove(\"dz-max-files-reached\");\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype.drop = function(e) {\r\n            var files, items;\r\n            if (!e.dataTransfer) {\r\n                return;\r\n            }\r\n            this.emit(\"drop\", e);\r\n            files = e.dataTransfer.files;\r\n            this.emit(\"addedfiles\", files);\r\n            if (files.length) {\r\n                items = e.dataTransfer.items;\r\n                if (items && items.length && (items[0].webkitGetAsEntry != null)) {\r\n                    this._addFilesFromItems(items);\r\n                } else {\r\n                    this.handleFiles(files);\r\n                }\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype.paste = function(e) {\r\n            var items, _ref;\r\n            if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {\r\n                return;\r\n            }\r\n            this.emit(\"paste\", e);\r\n            items = e.clipboardData.items;\r\n            if (items.length) {\r\n                return this._addFilesFromItems(items);\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype.handleFiles = function(files) {\r\n            var file, _i, _len, _results;\r\n            _results = [];\r\n            for (_i = 0, _len = files.length; _i < _len; _i++) {\r\n                file = files[_i];\r\n                _results.push(this.addFile(file));\r\n            }\r\n            return _results;\r\n        };\r\n\r\n        Dropzone.prototype._addFilesFromItems = function(items) {\r\n            var entry, item, _i, _len, _results;\r\n            _results = [];\r\n            for (_i = 0, _len = items.length; _i < _len; _i++) {\r\n                item = items[_i];\r\n                if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {\r\n                    if (entry.isFile) {\r\n                        _results.push(this.addFile(item.getAsFile()));\r\n                    } else if (entry.isDirectory) {\r\n                        _results.push(this._addFilesFromDirectory(entry, entry.name));\r\n                    } else {\r\n                        _results.push(void 0);\r\n                    }\r\n                } else if (item.getAsFile != null) {\r\n                    if ((item.kind == null) || item.kind === \"file\") {\r\n                        _results.push(this.addFile(item.getAsFile()));\r\n                    } else {\r\n                        _results.push(void 0);\r\n                    }\r\n                } else {\r\n                    _results.push(void 0);\r\n                }\r\n            }\r\n            return _results;\r\n        };\r\n\r\n        Dropzone.prototype._addFilesFromDirectory = function(directory, path) {\r\n            var dirReader, errorHandler, readEntries;\r\n            dirReader = directory.createReader();\r\n            errorHandler = function(error) {\r\n                return typeof console !== \"undefined\" && console !== null ? typeof console.log === \"function\" ? console.log(error) : void 0 : void 0;\r\n            };\r\n            readEntries = (function(_this) {\r\n                return function() {\r\n                    return dirReader.readEntries(function(entries) {\r\n                        var entry, _i, _len;\r\n                        if (entries.length > 0) {\r\n                            for (_i = 0, _len = entries.length; _i < _len; _i++) {\r\n                                entry = entries[_i];\r\n                                if (entry.isFile) {\r\n                                    entry.file(function(file) {\r\n                                        if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {\r\n                                            return;\r\n                                        }\r\n                                        file.fullPath = \"\" + path + \"/\" + file.name;\r\n                                        return _this.addFile(file);\r\n                                    });\r\n                                } else if (entry.isDirectory) {\r\n                                    _this._addFilesFromDirectory(entry, \"\" + path + \"/\" + entry.name);\r\n                                }\r\n                            }\r\n                            readEntries();\r\n                        }\r\n                        return null;\r\n                    }, errorHandler);\r\n                };\r\n            })(this);\r\n            return readEntries();\r\n        };\r\n\r\n        Dropzone.prototype.accept = function(file, done) {\r\n            if (file.size > this.options.maxFilesize * 1024 * 1024) {\r\n                return done(this.options.dictFileTooBig.replace(\"{{filesize}}\", Math.round(file.size / 1024 / 10.24) / 100).replace(\"{{maxFilesize}}\", this.options.maxFilesize));\r\n            } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {\r\n                return done(this.options.dictInvalidFileType);\r\n            } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\r\n                done(this.options.dictMaxFilesExceeded.replace(\"{{maxFiles}}\", this.options.maxFiles));\r\n                return this.emit(\"maxfilesexceeded\", file);\r\n            } else {\r\n                return this.options.accept.call(this, file, done);\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype.addFile = function(file) {\r\n            file.upload = {\r\n                progress: 0,\r\n                total: file.size,\r\n                bytesSent: 0\r\n            };\r\n            this.files.push(file);\r\n            file.status = Dropzone.ADDED;\r\n            this.emit(\"addedfile\", file);\r\n            this._enqueueThumbnail(file);\r\n            return this.accept(file, (function(_this) {\r\n                return function(error) {\r\n                    if (error) {\r\n                        file.accepted = false;\r\n                        _this._errorProcessing([file], error);\r\n                    } else {\r\n                        file.accepted = true;\r\n                        if (_this.options.autoQueue) {\r\n                            _this.enqueueFile(file);\r\n                        }\r\n                    }\r\n                    return _this._updateMaxFilesReachedClass();\r\n                };\r\n            })(this));\r\n        };\r\n\r\n        Dropzone.prototype.enqueueFiles = function(files) {\r\n            var file, _i, _len;\r\n            for (_i = 0, _len = files.length; _i < _len; _i++) {\r\n                file = files[_i];\r\n                this.enqueueFile(file);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Dropzone.prototype.enqueueFile = function(file) {\r\n            if (file.status === Dropzone.ADDED && file.accepted === true) {\r\n                file.status = Dropzone.QUEUED;\r\n                if (this.options.autoProcessQueue) {\r\n                    return setTimeout(((function(_this) {\r\n                        return function() {\r\n                            return _this.processQueue();\r\n                        };\r\n                    })(this)), 0);\r\n                }\r\n            } else {\r\n                throw new Error(\"This file can't be queued because it has already been processed or was rejected.\");\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype._thumbnailQueue = [];\r\n\r\n        Dropzone.prototype._processingThumbnail = false;\r\n\r\n        Dropzone.prototype._enqueueThumbnail = function(file) {\r\n            if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {\r\n                this._thumbnailQueue.push(file);\r\n                return setTimeout(((function(_this) {\r\n                    return function() {\r\n                        return _this._processThumbnailQueue();\r\n                    };\r\n                })(this)), 0);\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype._processThumbnailQueue = function() {\r\n            if (this._processingThumbnail || this._thumbnailQueue.length === 0) {\r\n                return;\r\n            }\r\n            this._processingThumbnail = true;\r\n            return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {\r\n                return function() {\r\n                    _this._processingThumbnail = false;\r\n                    return _this._processThumbnailQueue();\r\n                };\r\n            })(this));\r\n        };\r\n\r\n        Dropzone.prototype.removeFile = function(file) {\r\n            if (file.status === Dropzone.UPLOADING) {\r\n                this.cancelUpload(file);\r\n            }\r\n            this.files = without(this.files, file);\r\n            this.emit(\"removedfile\", file);\r\n            if (this.files.length === 0) {\r\n                return this.emit(\"reset\");\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {\r\n            var file, _i, _len, _ref;\r\n            if (cancelIfNecessary == null) {\r\n                cancelIfNecessary = false;\r\n            }\r\n            _ref = this.files.slice();\r\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                file = _ref[_i];\r\n                if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {\r\n                    this.removeFile(file);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Dropzone.prototype.createThumbnail = function(file, callback) {\r\n            var fileReader;\r\n            fileReader = new FileReader;\r\n            fileReader.onload = (function(_this) {\r\n                return function() {\r\n                    if (file.type === \"image/svg+xml\") {\r\n                        _this.emit(\"thumbnail\", file, fileReader.result);\r\n                        if (callback != null) {\r\n                            callback();\r\n                        }\r\n                        return;\r\n                    }\r\n                    return _this.createThumbnailFromUrl(file, fileReader.result, callback);\r\n                };\r\n            })(this);\r\n            return fileReader.readAsDataURL(file);\r\n        };\r\n\r\n        Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback, crossOrigin) {\r\n            var img;\r\n            img = document.createElement(\"img\");\r\n            if (crossOrigin) {\r\n                img.crossOrigin = crossOrigin;\r\n            }\r\n            img.onload = (function(_this) {\r\n                return function() {\r\n                    var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;\r\n                    file.width = img.width;\r\n                    file.height = img.height;\r\n                    resizeInfo = _this.options.resize.call(_this, file);\r\n                    if (resizeInfo.trgWidth == null) {\r\n                        resizeInfo.trgWidth = resizeInfo.optWidth;\r\n                    }\r\n                    if (resizeInfo.trgHeight == null) {\r\n                        resizeInfo.trgHeight = resizeInfo.optHeight;\r\n                    }\r\n                    canvas = document.createElement(\"canvas\");\r\n                    ctx = canvas.getContext(\"2d\");\r\n                    canvas.width = resizeInfo.trgWidth;\r\n                    canvas.height = resizeInfo.trgHeight;\r\n                    drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);\r\n                    thumbnail = canvas.toDataURL(\"image/png\");\r\n                    _this.emit(\"thumbnail\", file, thumbnail);\r\n                    if (callback != null) {\r\n                        return callback();\r\n                    }\r\n                };\r\n            })(this);\r\n            if (callback != null) {\r\n                img.onerror = callback;\r\n            }\r\n            return img.src = imageUrl;\r\n        };\r\n\r\n        Dropzone.prototype.processQueue = function() {\r\n            var i, parallelUploads, processingLength, queuedFiles;\r\n            parallelUploads = this.options.parallelUploads;\r\n            processingLength = this.getUploadingFiles().length;\r\n            i = processingLength;\r\n            if (processingLength >= parallelUploads) {\r\n                return;\r\n            }\r\n            queuedFiles = this.getQueuedFiles();\r\n            if (!(queuedFiles.length > 0)) {\r\n                return;\r\n            }\r\n            if (this.options.uploadMultiple) {\r\n                return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));\r\n            } else {\r\n                while (i < parallelUploads) {\r\n                    if (!queuedFiles.length) {\r\n                        return;\r\n                    }\r\n                    this.processFile(queuedFiles.shift());\r\n                    i++;\r\n                }\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype.processFile = function(file) {\r\n            return this.processFiles([file]);\r\n        };\r\n\r\n        Dropzone.prototype.processFiles = function(files) {\r\n            var file, _i, _len;\r\n            for (_i = 0, _len = files.length; _i < _len; _i++) {\r\n                file = files[_i];\r\n                file.processing = true;\r\n                file.status = Dropzone.UPLOADING;\r\n                this.emit(\"processing\", file);\r\n            }\r\n            if (this.options.uploadMultiple) {\r\n                this.emit(\"processingmultiple\", files);\r\n            }\r\n            return this.uploadFiles(files);\r\n        };\r\n\r\n        Dropzone.prototype._getFilesWithXhr = function(xhr) {\r\n            var file, files;\r\n            return files = (function() {\r\n                var _i, _len, _ref, _results;\r\n                _ref = this.files;\r\n                _results = [];\r\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                    file = _ref[_i];\r\n                    if (file.xhr === xhr) {\r\n                        _results.push(file);\r\n                    }\r\n                }\r\n                return _results;\r\n            }).call(this);\r\n        };\r\n\r\n        Dropzone.prototype.cancelUpload = function(file) {\r\n            var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;\r\n            if (file.status === Dropzone.UPLOADING) {\r\n                groupedFiles = this._getFilesWithXhr(file.xhr);\r\n                for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {\r\n                    groupedFile = groupedFiles[_i];\r\n                    groupedFile.status = Dropzone.CANCELED;\r\n                }\r\n                file.xhr.abort();\r\n                for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {\r\n                    groupedFile = groupedFiles[_j];\r\n                    this.emit(\"canceled\", groupedFile);\r\n                }\r\n                if (this.options.uploadMultiple) {\r\n                    this.emit(\"canceledmultiple\", groupedFiles);\r\n                }\r\n            } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {\r\n                file.status = Dropzone.CANCELED;\r\n                this.emit(\"canceled\", file);\r\n                if (this.options.uploadMultiple) {\r\n                    this.emit(\"canceledmultiple\", [file]);\r\n                }\r\n            }\r\n            if (this.options.autoProcessQueue) {\r\n                return this.processQueue();\r\n            }\r\n        };\r\n\r\n        resolveOption = function() {\r\n            var args, option;\r\n            option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\r\n            if (typeof option === 'function') {\r\n                return option.apply(this, args);\r\n            }\r\n            return option;\r\n        };\r\n\r\n        Dropzone.prototype.uploadFile = function(file) {\r\n            return this.uploadFiles([file]);\r\n        };\r\n\r\n        Dropzone.prototype.uploadFiles = function(files) {\r\n            var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;\r\n            xhr = new XMLHttpRequest();\r\n            for (_i = 0, _len = files.length; _i < _len; _i++) {\r\n                file = files[_i];\r\n                file.xhr = xhr;\r\n            }\r\n            method = resolveOption(this.options.method, files);\r\n            url = resolveOption(this.options.url, files);\r\n            xhr.open(method, url, true);\r\n            xhr.withCredentials = !!this.options.withCredentials;\r\n            response = null;\r\n            handleError = (function(_this) {\r\n                return function() {\r\n                    var _j, _len1, _results;\r\n                    _results = [];\r\n                    for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\r\n                        file = files[_j];\r\n                        _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace(\"{{statusCode}}\", xhr.status), xhr));\r\n                    }\r\n                    return _results;\r\n                };\r\n            })(this);\r\n            updateProgress = (function(_this) {\r\n                return function(e) {\r\n                    var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;\r\n                    if (e != null) {\r\n                        progress = 100 * e.loaded / e.total;\r\n                        for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\r\n                            file = files[_j];\r\n                            file.upload = {\r\n                                progress: progress,\r\n                                total: e.total,\r\n                                bytesSent: e.loaded\r\n                            };\r\n                        }\r\n                    } else {\r\n                        allFilesFinished = true;\r\n                        progress = 100;\r\n                        for (_k = 0, _len2 = files.length; _k < _len2; _k++) {\r\n                            file = files[_k];\r\n                            if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {\r\n                                allFilesFinished = false;\r\n                            }\r\n                            file.upload.progress = progress;\r\n                            file.upload.bytesSent = file.upload.total;\r\n                        }\r\n                        if (allFilesFinished) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    _results = [];\r\n                    for (_l = 0, _len3 = files.length; _l < _len3; _l++) {\r\n                        file = files[_l];\r\n                        _results.push(_this.emit(\"uploadprogress\", file, progress, file.upload.bytesSent));\r\n                    }\r\n                    return _results;\r\n                };\r\n            })(this);\r\n            xhr.onload = (function(_this) {\r\n                return function(e) {\r\n                    var _ref;\r\n                    if (files[0].status === Dropzone.CANCELED) {\r\n                        return;\r\n                    }\r\n                    if (xhr.readyState !== 4) {\r\n                        return;\r\n                    }\r\n                    response = xhr.responseText;\r\n                    if (xhr.getResponseHeader(\"content-type\") && ~xhr.getResponseHeader(\"content-type\").indexOf(\"application/json\")) {\r\n                        try {\r\n                            response = JSON.parse(response);\r\n                        } catch (_error) {\r\n                            e = _error;\r\n                            response = \"Invalid JSON response from server.\";\r\n                        }\r\n                    }\r\n                    updateProgress();\r\n                    if (!((200 <= (_ref = xhr.status) && _ref < 300))) {\r\n                        return handleError();\r\n                    } else {\r\n                        return _this._finished(files, response, e);\r\n                    }\r\n                };\r\n            })(this);\r\n            xhr.onerror = (function(_this) {\r\n                return function() {\r\n                    if (files[0].status === Dropzone.CANCELED) {\r\n                        return;\r\n                    }\r\n                    return handleError();\r\n                };\r\n            })(this);\r\n            progressObj = (_ref = xhr.upload) != null ? _ref : xhr;\r\n            progressObj.onprogress = updateProgress;\r\n            headers = {\r\n                \"Accept\": \"application/json\",\r\n                \"Cache-Control\": \"no-cache\",\r\n                \"X-Requested-With\": \"XMLHttpRequest\"\r\n            };\r\n            if (this.options.headers) {\r\n                extend(headers, this.options.headers);\r\n            }\r\n            for (headerName in headers) {\r\n                headerValue = headers[headerName];\r\n                if (headerValue) {\r\n                    xhr.setRequestHeader(headerName, headerValue);\r\n                }\r\n            }\r\n            formData = new FormData();\r\n            if (this.options.params) {\r\n                _ref1 = this.options.params;\r\n                for (key in _ref1) {\r\n                    value = _ref1[key];\r\n                    formData.append(key, value);\r\n                }\r\n            }\r\n            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\r\n                file = files[_j];\r\n                this.emit(\"sending\", file, xhr, formData);\r\n            }\r\n            if (this.options.uploadMultiple) {\r\n                this.emit(\"sendingmultiple\", files, xhr, formData);\r\n            }\r\n            if (this.element.tagName === \"FORM\") {\r\n                _ref2 = this.element.querySelectorAll(\"input, textarea, select, button\");\r\n                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\r\n                    input = _ref2[_k];\r\n                    inputName = input.getAttribute(\"name\");\r\n                    inputType = input.getAttribute(\"type\");\r\n                    if (input.tagName === \"SELECT\" && input.hasAttribute(\"multiple\")) {\r\n                        _ref3 = input.options;\r\n                        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\r\n                            option = _ref3[_l];\r\n                            if (option.selected) {\r\n                                formData.append(inputName, option.value);\r\n                            }\r\n                        }\r\n                    } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== \"checkbox\" && _ref4 !== \"radio\") || input.checked) {\r\n                        formData.append(inputName, input.value);\r\n                    }\r\n                }\r\n            }\r\n            for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {\r\n                formData.append(this._getParamName(i), files[i], this._renameFilename(files[i].name));\r\n            }\r\n            return this.submitRequest(xhr, formData, files);\r\n        };\r\n\r\n        Dropzone.prototype.submitRequest = function(xhr, formData, files) {\r\n            return xhr.send(formData);\r\n        };\r\n\r\n        Dropzone.prototype._finished = function(files, responseText, e) {\r\n            var file, _i, _len;\r\n            for (_i = 0, _len = files.length; _i < _len; _i++) {\r\n                file = files[_i];\r\n                file.status = Dropzone.SUCCESS;\r\n                this.emit(\"success\", file, responseText, e);\r\n                this.emit(\"complete\", file);\r\n            }\r\n            if (this.options.uploadMultiple) {\r\n                this.emit(\"successmultiple\", files, responseText, e);\r\n                this.emit(\"completemultiple\", files);\r\n            }\r\n            if (this.options.autoProcessQueue) {\r\n                return this.processQueue();\r\n            }\r\n        };\r\n\r\n        Dropzone.prototype._errorProcessing = function(files, message, xhr) {\r\n            var file, _i, _len;\r\n            for (_i = 0, _len = files.length; _i < _len; _i++) {\r\n                file = files[_i];\r\n                file.status = Dropzone.ERROR;\r\n                this.emit(\"error\", file, message, xhr);\r\n                this.emit(\"complete\", file);\r\n            }\r\n            if (this.options.uploadMultiple) {\r\n                this.emit(\"errormultiple\", files, message, xhr);\r\n                this.emit(\"completemultiple\", files);\r\n            }\r\n            if (this.options.autoProcessQueue) {\r\n                return this.processQueue();\r\n            }\r\n        };\r\n\r\n        return Dropzone;\r\n\r\n    })(Emitter);\r\n\r\n    Dropzone.version = \"4.3.0\";\r\n\r\n    Dropzone.options = {};\r\n\r\n    Dropzone.optionsForElement = function(element) {\r\n        if (element.getAttribute(\"id\")) {\r\n            return Dropzone.options[camelize(element.getAttribute(\"id\"))];\r\n        } else {\r\n            return void 0;\r\n        }\r\n    };\r\n\r\n    Dropzone.instances = [];\r\n\r\n    Dropzone.forElement = function(element) {\r\n        if (typeof element === \"string\") {\r\n            element = document.querySelector(element);\r\n        }\r\n        if ((element != null ? element.dropzone : void 0) == null) {\r\n            throw new Error(\"No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.\");\r\n        }\r\n        return element.dropzone;\r\n    };\r\n\r\n    Dropzone.autoDiscover = true;\r\n\r\n    Dropzone.discover = function() {\r\n        var checkElements, dropzone, dropzones, _i, _len, _results;\r\n        if (document.querySelectorAll) {\r\n            dropzones = document.querySelectorAll(\".dropzone\");\r\n        } else {\r\n            dropzones = [];\r\n            checkElements = function(elements) {\r\n                var el, _i, _len, _results;\r\n                _results = [];\r\n                for (_i = 0, _len = elements.length; _i < _len; _i++) {\r\n                    el = elements[_i];\r\n                    if (/(^| )dropzone($| )/.test(el.className)) {\r\n                        _results.push(dropzones.push(el));\r\n                    } else {\r\n                        _results.push(void 0);\r\n                    }\r\n                }\r\n                return _results;\r\n            };\r\n            checkElements(document.getElementsByTagName(\"div\"));\r\n            checkElements(document.getElementsByTagName(\"form\"));\r\n        }\r\n        _results = [];\r\n        for (_i = 0, _len = dropzones.length; _i < _len; _i++) {\r\n            dropzone = dropzones[_i];\r\n            if (Dropzone.optionsForElement(dropzone) !== false) {\r\n                _results.push(new Dropzone(dropzone));\r\n            } else {\r\n                _results.push(void 0);\r\n            }\r\n        }\r\n        return _results;\r\n    };\r\n\r\n    Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\\/12/i];\r\n\r\n    Dropzone.isBrowserSupported = function() {\r\n        var capableBrowser, regex, _i, _len, _ref;\r\n        capableBrowser = true;\r\n        if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {\r\n            if (!(\"classList\" in document.createElement(\"a\"))) {\r\n                capableBrowser = false;\r\n            } else {\r\n                _ref = Dropzone.blacklistedBrowsers;\r\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n                    regex = _ref[_i];\r\n                    if (regex.test(navigator.userAgent)) {\r\n                        capableBrowser = false;\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            capableBrowser = false;\r\n        }\r\n        return capableBrowser;\r\n    };\r\n\r\n    without = function(list, rejectedItem) {\r\n        var item, _i, _len, _results;\r\n        _results = [];\r\n        for (_i = 0, _len = list.length; _i < _len; _i++) {\r\n            item = list[_i];\r\n            if (item !== rejectedItem) {\r\n                _results.push(item);\r\n            }\r\n        }\r\n        return _results;\r\n    };\r\n\r\n    camelize = function(str) {\r\n        return str.replace(/[\\-_](\\w)/g, function(match) {\r\n            return match.charAt(1).toUpperCase();\r\n        });\r\n    };\r\n\r\n    Dropzone.createElement = function(string) {\r\n        var div;\r\n        div = document.createElement(\"div\");\r\n        div.innerHTML = string;\r\n        return div.childNodes[0];\r\n    };\r\n\r\n    Dropzone.elementInside = function(element, container) {\r\n        if (element === container) {\r\n            return true;\r\n        }\r\n        while (element = element.parentNode) {\r\n            if (element === container) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    Dropzone.getElement = function(el, name) {\r\n        var element;\r\n        if (typeof el === \"string\") {\r\n            element = document.querySelector(el);\r\n        } else if (el.nodeType != null) {\r\n            element = el;\r\n        }\r\n        if (element == null) {\r\n            throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector or a plain HTML element.\");\r\n        }\r\n        return element;\r\n    };\r\n\r\n    Dropzone.getElements = function(els, name) {\r\n        var e, el, elements, _i, _j, _len, _len1, _ref;\r\n        if (els instanceof Array) {\r\n            elements = [];\r\n            try {\r\n                for (_i = 0, _len = els.length; _i < _len; _i++) {\r\n                    el = els[_i];\r\n                    elements.push(this.getElement(el, name));\r\n                }\r\n            } catch (_error) {\r\n                e = _error;\r\n                elements = null;\r\n            }\r\n        } else if (typeof els === \"string\") {\r\n            elements = [];\r\n            _ref = document.querySelectorAll(els);\r\n            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\r\n                el = _ref[_j];\r\n                elements.push(el);\r\n            }\r\n        } else if (els.nodeType != null) {\r\n            elements = [els];\r\n        }\r\n        if (!((elements != null) && elements.length)) {\r\n            throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector, a plain HTML element or a list of those.\");\r\n        }\r\n        return elements;\r\n    };\r\n\r\n    Dropzone.confirm = function(question, accepted, rejected) {\r\n        if (window.confirm(question)) {\r\n            return accepted();\r\n        } else if (rejected != null) {\r\n            return rejected();\r\n        }\r\n    };\r\n\r\n    Dropzone.isValidFile = function(file, acceptedFiles) {\r\n        var baseMimeType, mimeType, validType, _i, _len;\r\n        if (!acceptedFiles) {\r\n            return true;\r\n        }\r\n        acceptedFiles = acceptedFiles.split(\",\");\r\n        mimeType = file.type;\r\n        baseMimeType = mimeType.replace(/\\/.*$/, \"\");\r\n        for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {\r\n            validType = acceptedFiles[_i];\r\n            validType = validType.trim();\r\n            if (validType.charAt(0) === \".\") {\r\n                if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {\r\n                    return true;\r\n                }\r\n            } else if (/\\/\\*$/.test(validType)) {\r\n                if (baseMimeType === validType.replace(/\\/.*$/, \"\")) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (mimeType === validType) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    if (typeof jQuery !== \"undefined\" && jQuery !== null) {\r\n        jQuery.fn.dropzone = function(options) {\r\n            return this.each(function() {\r\n                return new Dropzone(this, options);\r\n            });\r\n        };\r\n    }\r\n\r\n    if (typeof module !== \"undefined\" && module !== null) {\r\n        module.exports = Dropzone;\r\n    } else {\r\n        window.Dropzone = Dropzone;\r\n    }\r\n\r\n    Dropzone.ADDED = \"added\";\r\n\r\n    Dropzone.QUEUED = \"queued\";\r\n\r\n    Dropzone.ACCEPTED = Dropzone.QUEUED;\r\n\r\n    Dropzone.UPLOADING = \"uploading\";\r\n\r\n    Dropzone.PROCESSING = Dropzone.UPLOADING;\r\n\r\n    Dropzone.CANCELED = \"canceled\";\r\n\r\n    Dropzone.ERROR = \"error\";\r\n\r\n    Dropzone.SUCCESS = \"success\";\r\n\r\n\r\n    /*\r\n\r\n     Bugfix for iOS 6 and 7\r\n     Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\r\n     based on the work of https://github.com/stomita/ios-imagefile-megapixel\r\n     */\r\n\r\n    detectVerticalSquash = function(img) {\r\n        var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;\r\n        iw = img.naturalWidth;\r\n        ih = img.naturalHeight;\r\n        canvas = document.createElement(\"canvas\");\r\n        canvas.width = 1;\r\n        canvas.height = ih;\r\n        ctx = canvas.getContext(\"2d\");\r\n        ctx.drawImage(img, 0, 0);\r\n        data = ctx.getImageData(0, 0, 1, ih).data;\r\n        sy = 0;\r\n        ey = ih;\r\n        py = ih;\r\n        while (py > sy) {\r\n            alpha = data[(py - 1) * 4 + 3];\r\n            if (alpha === 0) {\r\n                ey = py;\r\n            } else {\r\n                sy = py;\r\n            }\r\n            py = (ey + sy) >> 1;\r\n        }\r\n        ratio = py / ih;\r\n        if (ratio === 0) {\r\n            return 1;\r\n        } else {\r\n            return ratio;\r\n        }\r\n    };\r\n\r\n    drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\r\n        var vertSquashRatio;\r\n        vertSquashRatio = detectVerticalSquash(img);\r\n        return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\r\n    };\r\n\r\n\r\n    /*\r\n     * contentloaded.js\r\n     *\r\n     * Author: Diego Perini (diego.perini at gmail.com)\r\n     * Summary: cross-browser wrapper for DOMContentLoaded\r\n     * Updated: 20101020\r\n     * License: MIT\r\n     * Version: 1.2\r\n     *\r\n     * URL:\r\n     * http://javascript.nwbox.com/ContentLoaded/\r\n     * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE\r\n     */\r\n\r\n    contentLoaded = function(win, fn) {\r\n        var add, doc, done, init, poll, pre, rem, root, top;\r\n        done = false;\r\n        top = true;\r\n        doc = win.document;\r\n        root = doc.documentElement;\r\n        add = (doc.addEventListener ? \"addEventListener\" : \"attachEvent\");\r\n        rem = (doc.addEventListener ? \"removeEventListener\" : \"detachEvent\");\r\n        pre = (doc.addEventListener ? \"\" : \"on\");\r\n        init = function(e) {\r\n            if (e.type === \"readystatechange\" && doc.readyState !== \"complete\") {\r\n                return;\r\n            }\r\n            (e.type === \"load\" ? win : doc)[rem](pre + e.type, init, false);\r\n            if (!done && (done = true)) {\r\n                return fn.call(win, e.type || e);\r\n            }\r\n        };\r\n        poll = function() {\r\n            var e;\r\n            try {\r\n                root.doScroll(\"left\");\r\n            } catch (_error) {\r\n                e = _error;\r\n                setTimeout(poll, 50);\r\n                return;\r\n            }\r\n            return init(\"poll\");\r\n        };\r\n        if (doc.readyState !== \"complete\") {\r\n            if (doc.createEventObject && root.doScroll) {\r\n                try {\r\n                    top = !win.frameElement;\r\n                } catch (_error) {}\r\n                if (top) {\r\n                    poll();\r\n                }\r\n            }\r\n            doc[add](pre + \"DOMContentLoaded\", init, false);\r\n            doc[add](pre + \"readystatechange\", init, false);\r\n            return win[add](pre + \"load\", init, false);\r\n        }\r\n    };\r\n\r\n    Dropzone._autoDiscoverFunction = function() {\r\n        if (Dropzone.autoDiscover) {\r\n            return Dropzone.discover();\r\n        }\r\n    };\r\n\r\n    contentLoaded(window, Dropzone._autoDiscoverFunction);\r\n\r\n}).call(this);"],"sourceRoot":"/source/"}